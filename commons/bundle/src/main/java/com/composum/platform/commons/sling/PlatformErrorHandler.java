package com.composum.platform.commons.sling;

import com.composum.sling.core.util.ResourceUtil;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.request.RequestPathInfo;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.engine.servlets.ErrorHandler;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.ConfigurationPolicy;
import org.osgi.service.component.annotations.Modified;
import org.osgi.service.metatype.annotations.AttributeDefinition;
import org.osgi.service.metatype.annotations.Designate;
import org.osgi.service.metatype.annotations.ObjectClassDefinition;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Nonnull;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * This ErrorHandler is a replacement of the SlingDefaultErrorHandler with a delegation of the error handling
 * to error pages searched in a configurable path relative to the requested path (and site).
 * There are only HML requests which are not Ajax requests delegated. In the other cases the HTTP error code is send
 * back without custom content generated by an error page (Ajax requests should handle HTTP errors on the client side).
 */
@Component(
        property = {
                Constants.SERVICE_DESCRIPTION + "=Composum Platform Error Handler"
        },
        configurationPolicy = ConfigurationPolicy.REQUIRE // use configuration to switch service on/off
)
@Designate(ocd = PlatformErrorHandler.Config.class)
public class PlatformErrorHandler implements ErrorHandler {

    private static final Logger LOG = LoggerFactory.getLogger(PlatformErrorHandler.class);

    public static final String ERRORPAGE_STATUS = "errorpage.status";

    @ObjectClassDefinition(
            name = "Composum Platform Error Handler Configuration"
    )
    @interface Config {

        @AttributeDefinition(
                description = "the path to the error pages; e.g. 'meta/errorpages' for searching error pages along the requested path"
        )
        String errorpagesPath() default "meta/errorpages";

        @AttributeDefinition(
                description = "the path to the systems default error pages; e.g. '/libs/composum/platform/commons/errorpages'"
        )
        String defaultErrorpages() default "/libs/composum/platform/commons/errorpages";
    }

    protected Config config;

    @Nonnull
    public Config getConfig() {
        return config;
    }

    @Override
    public void handleError(int status, String message, SlingHttpServletRequest request, SlingHttpServletResponse response)
            throws IOException {

        if (response.isCommitted()) {
            LOG.error("handleError: Response already committed; cannot send error {} '{}'", status, message);
        } else {
            handleError(request, response, status, message);
        }
    }

    @Override
    public void handleError(Throwable throwable, SlingHttpServletRequest request, SlingHttpServletResponse response)
            throws IOException {

        if (response.isCommitted()) {
            LOG.error("handleError: Response already committed; cannot send error {}", throwable);
        } else {
            handleError(request, response, HttpServletResponse.SC_INTERNAL_SERVER_ERROR, throwable.getMessage());
        }
    }

    /**
     * @return 'true' if the request is an Ajax request
     */
    protected boolean isAjaxRequest(SlingHttpServletRequest request) {
        return "XMLHttpRequest".equals(request.getHeader("X-Requested-With"));
    }

    /**
     * the general error handling strategy
     */
    protected void handleError(SlingHttpServletRequest request, SlingHttpServletResponse response,
                               int status, String message)
            throws IOException {
        if (isAjaxRequest(request)) {
            // in case of an Ajax request answer with the right HTTP error code
            response.sendError(status, message);
        } else {
            try {

                RequestPathInfo pathInfo = request.getRequestPathInfo();
                // check for a HTML reuest which can be forwared to an appropriate error page
                if (!"html".equalsIgnoreCase(pathInfo.getExtension())
                        || !forwardToErrorpage(request, response, status)) {
                    // if it is not an HTML request or no forward rule found send the raw HTTP error back
                    response.sendError(status, message);
                }
            } catch (ServletException ex) {
                LOG.error(ex.getMessage(), ex);
                throw new IOException(ex.getMessage());
            }
        }
    }

    /**
     * try to forward to an error page
     *
     * @return 'true' if the forward is done; 'false' otherwise
     */
    protected boolean forwardToErrorpage(SlingHttpServletRequest request,
                                         SlingHttpServletResponse response, int status)
            throws ServletException, IOException {
        Resource errorpage = getErrorpage(request, status);
        if (errorpage != null) {
            request.setAttribute(ERRORPAGE_STATUS, status); // hint for the custom page
            RequestDispatcher dispatcher = request.getRequestDispatcher(errorpage);
            dispatcher.forward(request, response);
            return true;
        }
        return false;
    }

    /**
     * Determines the error page corresponding to the requested path.
     * Is searching upwards beginning with the requested path for an error page
     * using the path pattern: {requested path}/{errorpagesPath}/{status code}.
     * If nothing found the pattern: {defaultErrorpages}/{status code} is used if existing.
     *
     * @return the error page found; <code>null</code> if no error page available
     */
    protected Resource getErrorpage(SlingHttpServletRequest request, int status) {
        Resource errorpage = null;
        ResourceResolver resolver = request.getResourceResolver();

        if (config.errorpagesPath().startsWith("/")) {
            // if the conugured path is an absolute path use this path only
            errorpage = resolver.getResource(config.errorpagesPath() + "/" + status);

        } else {
            String path = request.getRequestPathInfo().getResourcePath();
            Resource resource = resolver.resolve(request, path);

            // skip non existing resource paths in the requested path
            while (ResourceUtil.isNonExistingResource(resource)) {
                int lastSlash = path.lastIndexOf('/');
                if (lastSlash > 0) {
                    path = path.substring(0, lastSlash);
                } else {
                    path = "/";
                }
                resource = resolver.resolve(request, path);
            }

            // scan upwards for an appropriate error page
            while (errorpage == null && resource != null) {
                path = resource.getPath();
                if ("/".equals(path)) {
                    path = "";
                }
                errorpage = resolver.getResource(path + "/" + config.errorpagesPath() + "/" + status);
                if (errorpage == null) {
                    resource = resource.getParent();
                }
            }
        }
        if (errorpage == null) {
            // use the default page if no custom error page found
            errorpage = resolver.getResource(config.defaultErrorpages() + "/" + status);
        }
        return errorpage;
    }

    @Activate
    @Modified
    protected void activate(final Config config) {
        this.config = config;
    }
}
